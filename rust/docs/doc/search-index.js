var searchIndex = new Map(JSON.parse('[\
["rust_final_project",{"doc":"This is the main module for the data pipeline application. …","t":"CCHCCCHHHHHHHPPGPFFOOONNNNNNOOOONNNNNNONONNNOOOOOONNNNNNNNNOOONNNNNNOOOOOOOOONNNNNNNNNNNNOOHHHHH","n":["db","ingestion","main","models","transform","utils","cleardb","connect_db","create_table","get_and_print_first_records","insert_movies","process_movies","ingest_csv","CsvError","DeserializationError","IngestionError","IoError","Movie","TransformedMovie","actors","avg_vote","avg_vote","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","country","country","critics_vote","critics_vote","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","deserialize","directors","drop","drop","drop","duration","duration","effort","erotism","filmtv_id","filmtv_id","fmt","fmt","fmt","from","from","from","from","from","from","genre","genre","humor","init","init","init","into","into","into","notes","public_vote","public_vote","rhythm","tension","title","title","total_votes","total_votes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","year","year","clean_and_validate_data","dataframe_to_transformed_movies","movies_to_dataframe","transform_movies","parse_field"],"q":[[0,"rust_final_project"],[6,"rust_final_project::db"],[12,"rust_final_project::ingestion"],[13,"rust_final_project::models"],[91,"rust_final_project::transform"],[95,"rust_final_project::utils"],[96,"anyhow"],[97,"tokio_postgres::client"],[98,"tokio_postgres::error"],[99,"core::result"],[100,"alloc::vec"],[101,"core::error"],[102,"alloc::boxed"],[103,"std::path"],[104,"core::convert"],[105,"serde::de"],[106,"core::fmt"],[107,"core::fmt"],[108,"std::io::error"],[109,"csv::error"],[110,"core::any"],[111,"polars_core::frame"],[112,"polars_error"],[113,"core::option"],[114,"core::str::traits"]],"d":["This module provides functions to interact with a …","This module provides functionality to ingest movie data …","","This module provides structures and error handling for …","This module provides functions to transform movie data …","This module provides utility functions for parsing fields. …","Clears the <code>Movie</code> table in the PostgreSQL database.","Connects to the PostgreSQL database.","Creates the <code>Movie</code> table in the PostgreSQL database if it …","Retrieves and prints the first few records from the <code>Movie</code> …","Inserts a list of <code>TransformedMovie</code> structs into the <code>Movie</code> …","Processes a list of transformed movies by connecting to …","Ingests movie data from a CSV file and converts it into a …","Error that occurs during CSV parsing.","Error that occurs during JSON deserialization.","Enum representing various errors that can occur during the …","Error that occurs during I/O operations.","Struct representing a movie with optional fields. This …","Struct representing a transformed movie with non-optional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>serde_json::Error</code> into an <code>IngestionError</code>.","Converts an <code>io::Error</code> into an <code>IngestionError</code>.","Converts a <code>csv::Error</code> into an <code>IngestionError</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Cleans and validates the data in a <code>DataFrame</code>.","Converts a cleaned <code>DataFrame</code> into a vector of …","Converts a vector of <code>Movie</code> structs into a Polars <code>DataFrame</code>.","Transforms a list of <code>Movie</code> structs into a list of …","Parses a string field into a specified type."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,0,13,0,0,12,12,7,13,12,7,13,12,7,12,7,12,7,13,12,7,13,12,7,12,12,12,13,12,7,12,7,12,12,12,7,13,12,7,13,13,13,13,12,7,12,7,12,13,12,7,13,12,7,12,12,7,12,12,12,7,12,7,13,12,7,13,12,7,13,12,7,13,12,7,12,7,0,0,0,0,0],"f":"``{{}{{d{b}}}}```{f{{j{bh}}}}{{}{{j{fh}}}}1{{fl}{{j{bh}}}}{{f{A`{n}}}{{j{bh}}}}{{{Ab{n}}}{{j{b{Af{Ad}}}}}}{c{{j{{Ab{Ah}}Aj}}}{{An{Al}}}}`````````{ce{}{}}00000````{B`c{}}00000`{c{{j{Ah}}}Bb}`{B`b}00``````{{AjBd}Bf}{{AhBd}Bf}{{nBd}Bf}{cc{}}{BhAj}{BjAj}{BlAj}33```{{}B`}00;;;`````````{c{{j{e}}}{}{}}00000{cBn{}}00===``{C`{{j{C`Cb}}}}{C`{{j{{Ab{n}}{Af{Ad}}}}}}{{{Ab{Ah}}}{{j{C`Cb}}}}{{{Ab{Ah}}}{{j{{Ab{n}}{Af{Ad}}}}}}{Cd{{Cf{c}}}Ch}","c":[],"p":[[1,"unit"],[8,"Result",96],[5,"Client",97],[5,"Error",98],[6,"Result",99],[1,"i64"],[5,"TransformedMovie",13],[1,"slice"],[5,"Vec",100],[10,"Error",101],[5,"Box",102],[5,"Movie",13],[6,"IngestionError",13],[5,"Path",103],[10,"AsRef",104],[1,"usize"],[10,"Deserializer",105],[5,"Formatter",106],[8,"Result",106],[5,"Error",107],[5,"Error",108],[5,"Error",109],[5,"TypeId",110],[5,"DataFrame",111],[6,"PolarsError",112],[1,"str"],[6,"Option",113],[10,"FromStr",114]],"b":[[54,"impl-From%3CError%3E-for-IngestionError"],[55,"impl-From%3CError%3E-for-IngestionError"],[56,"impl-From%3CError%3E-for-IngestionError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
